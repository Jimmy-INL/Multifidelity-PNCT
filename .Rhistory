library(MuFiCokriging)
setwd("~/Área de Trabalho/Projetos/IC UFRJ/Multifidelity-GP/docs")
TRUEknitr::opts_chunk$set(echo = TRUE)
sum
# Dependências
library(MuFiCokriging)
library(tidyverse)
MuFicokm15Examples
#- 3 Dimensional test with 3 levels of response
#--- test functions
myfunc1 <- function(x){sin(2*pi*x[,1])*0.2*(x[,2]+2)^2+cos(4*pi*x[,3])^2}
myfunc2 <- function(x){2*myfunc1(x)+x[,3]}
myfunc3 <- function(x){3*myfunc2(x)+x[,2]+x[,1]}
#--- Data
#-- Nested Experimental design sets
nD1 <- 100
nD2 <- 50
nD3 <- 20
set.seed(1);D1 <- matrix(runif(n=nD1*3, 0,1),ncol=3)
set.seed(2);D2 <- matrix(runif(n=nD2*3, 0,1),ncol=3)
set.seed(3);D3 <- matrix(runif(n=nD3*3, 0,1),ncol=3)
NestDesign  <- NestedDesignBuild(design = list(D1,D2,D3))
#-- observations
z1 <- myfunc1(NestDesign$PX)
z2 <- myfunc2(ExtractNestDesign(NestDesign,2))
z3 <- myfunc3(ExtractNestDesign(NestDesign,3))
#--- Multi-fidelity cokriging creation
mymodel <- MuFicokm(
formula = list(~1,~1+X2,~1+X3),
MuFidesign = NestDesign,
response = list(z1,z2,z3),
nlevel = 3)
#--- Multi-fidelity cokriging prediction
newdata <- matrix(runif(333,0,1),ncol=3)
predictions <- predict(mymodel, newdata, "UK")
z.pred <- predictions$mean
#--- Multi-fidelity cokriging cross Validation
set.seed(1);indice <- sample(1:nD3)[1:10]
#-- Observations removing from the highest level
resCV.cok <- CrossValidationMuFicokm(mymodel,indice)
#-- Observations removing from all levels
resCV.cok.all <- CrossValidationMuFicokmAll(mymodel,indice)
#--- Multi-fidelity cokriging summary
sum <- summary(mymodel)
myfunc1(nD1)
D1
z1
z2
z3
myfunc1(D1)
myfunc1(D2)
myfunc1(D3)
myfunc1(D1)
ggplot() +
geom_line(x=D1, y=myfunc1(D1))
df = data_frame(x=D1, level_1=myfunc1(D1), level_2=myfunc1(D2),  level_3=myfunc1(D3))
df = data_frame(x=D1, level_1=myfunc1(D1), level_2=myfunc1(D1),  level_3=myfunc1(D1))
df
df = data_frame(x=D1, level_1=myfunc1(D1), level_2=myfunc2(D1),  level_3=myfunc3(D1))
df
ggplot(data=df) +
geom_line(x=x, y=level_1) +
geom_line(x=x, y=level_2) +
geom_line(x=x, y=level_3)
df = data_frame('x'=D1, 'level_1'=myfunc1(D1), 'level_2'=myfunc2(D1),  'level_3'=myfunc3(D1))
df
ggplot(data=df) +
geom_line(x=1:100, y=level_1) +
geom_line(x=1:100, y=level_2) +
geom_line(x=1:100, y=level_3)
df
df$level_1
ggplot(data=df) +
geom_line(x=1:100, y=df$level_1) +
geom_line(x=1:100, y=df$level_2) +
geom_line(x=1:100, y=df$level_3)
?geom_line
ggplot(data=df) +
geom_line(aes(x, level_1))
ggplot(data=df, aes(x, level_1)) +
geom_line()
ggplot(data=df, aes(x, level_1)) +
geom_line()
df = data_frame('x'=1:100, 'level_1'=myfunc1(D1), 'level_2'=myfunc2(D1),  'level_3'=myfunc3(D1))
df
ggplot(df, aes(x, level_1)) +
geom_line()
ggplot(df, aes(x, level_1)) +
geom_line(aes(x, level_2))
ggplot(df) +
geom_line(aes(x, level_1)) +
geom_line(aes(x, level_2)) +
geom_line(aes(x, level_3))
ggplot(df) +
geom_line(aes(x, level_1, color='red')) +
geom_line(aes(x, level_2, color='orange')) +
geom_line(aes(x, level_3, color='green'))
ggplot(df) +
geom_line(aes(x, level_1, color='red')) +
geom_line(aes(x, level_2, color='blue')) +
geom_line(aes(x, level_3, color='green'))
ggplot(df) +
geom_line(aes(x, level_1, color='low')) +
geom_line(aes(x, level_2, color='medium')) +
geom_line(aes(x, level_3, color='high'))
ggplot(df) +
geom_line(aes(x, level_1, color='high')) +
geom_line(aes(x, level_2, color='medium')) +
geom_line(aes(x, level_3, color='low'))
ggplot(df) +
geom_path(aes(x, level_1, color='high')) +
geom_path(aes(x, level_2, color='medium')) +
geom_path(aes(x, level_3, color='low'))
NestDesign
